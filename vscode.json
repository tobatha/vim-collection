"vim.easymotion": true,
"vim.incsearch": true,
"vim.useSystemClipboard": true,
"vim.useCtrlKeys": true,
"vim.insertModeKeyBindings": [
    {
        "before": ["j", "j"],
        "after": ["<Esc>"],
    }
],
"vim.handleKeys": {
    "<C-a>": false,
    "<C-f>": false,
},
"vim.normalModeKeyBindingsNonRecursive": [
    {
        "before": ["S-Tab"],
        "commands": ["editor.action.outdentLines"],
    },
    {
        "before": ["Tab"],
        "commands": ["editor.action.indentLines"],
    },
    {
        "before": ["∆"],
        "commands": ["editor.action.moveLinesDownAction"],
    },
    {
        "before": ["˚"],
        "commands": ["editor.action.moveLinesUpAction"],
    },
],
"vim.insertModeKeyBindingsNonRecursive": [
    {
        "before": ["∆"],
        "commands": ["editor.action.moveLinesDownAction"],
    },
    {
        "before": ["˚"],
        "commands": ["editor.action.moveLinesUpAction"],
    },
],
"vim.visualModeKeyBindingsNonRecursive": [
    {
        "before": ["∆"],
        "commands": ["editor.action.moveLinesDownAction"],
    },
    {
        "before": ["˚"],
        "commands": ["editor.action.moveLinesUpAction"],
    },
],





// keybindings json
// Place your key bindings in this file to override the defaults
// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },

    {
        "key": "ctrl+h", 
        "command": "workbench.action.navigateLeft", 
    },
    {
        "key": "ctrl+l", 
        "command": "workbench.action.navigateRight", 
    },
    {
        "key": "ctrl+k", 
        "command": "workbench.action.navigateUp", 
    },
    {
        "key": "ctrl+j", 
        "command": "workbench.action.navigateDown", 
    },
    {
        "key": "cmd+o", 
        "command": "workbench.action.showEditorsInActiveGroup", 
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        "key": "cmd+enter",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+e",
        "command": "-extension.vim_ctrl+e",
        "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
    },
    {
        "key": "alt+n",
        "command": "explorer.newFile",
    },
    {
        "key": "alt+m",
        "command": "explorer.newFolder",
    },
    {
        "key": "ctrl+j",
        "command": "cursorDown",
        "when": "textInputFocus && vim.active && vim.mode == 'Insert'",
    },
    {
        "key": "ctrl+k",
        "command": "cursorUp",
        "when": "textInputFocus && vim.active && vim.mode == 'Insert'",
    },
    {
        "key": "ctrl+h",
        "command": "cursorLeft",
        "when": "textInputFocus && vim.active && vim.mode == 'Insert'",
    },
    {
        "key": "ctrl+l",
        "command": "cursorRight",
        "when": "textInputFocus && vim.active && vim.mode == 'Insert'",
    },
    {
        "key": "ctrl+n",
        "command": "-showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+n",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+d",
        "command": "-list.focusPageDown",
        "when": "listFocus && !inputFocus"
    },
]
